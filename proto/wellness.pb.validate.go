// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: wellness.proto

package wellness

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _wellness_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListLessonsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLessonsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if wrapper := m.GetDayOfWeek(); wrapper != nil {

		if val := wrapper.GetValue(); val < 0 || val > 6 {
			return ListLessonsRequestValidationError{
				field:  "DayOfWeek",
				reason: "value must be inside range [0, 6]",
			}
		}

	}

	if wrapper := m.GetBeginHours(); wrapper != nil {

		if val := wrapper.GetValue(); val < 0 || val > 23 {
			return ListLessonsRequestValidationError{
				field:  "BeginHours",
				reason: "value must be inside range [0, 23]",
			}
		}

	}

	if wrapper := m.GetBeginMinutes(); wrapper != nil {

		if val := wrapper.GetValue(); val < 0 || val > 59 {
			return ListLessonsRequestValidationError{
				field:  "BeginMinutes",
				reason: "value must be inside range [0, 59]",
			}
		}

	}

	if wrapper := m.GetTypeSearch(); wrapper != nil {

		if _, ok := _ListLessonsRequest_TypeSearch_InLookup[wrapper.GetValue()]; !ok {
			return ListLessonsRequestValidationError{
				field:  "TypeSearch",
				reason: "value must be in list [lt gt gte lte eq]",
			}
		}

	}

	return nil
}

// ListLessonsRequestValidationError is the validation error returned by
// ListLessonsRequest.Validate if the designated constraints aren't met.
type ListLessonsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLessonsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLessonsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLessonsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLessonsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLessonsRequestValidationError) ErrorName() string {
	return "ListLessonsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLessonsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLessonsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLessonsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLessonsRequestValidationError{}

var _ListLessonsRequest_TypeSearch_InLookup = map[string]struct{}{
	"lt":  {},
	"gt":  {},
	"gte": {},
	"lte": {},
	"eq":  {},
}

// Validate checks the field values on ListRoomsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListRoomsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListRoomsRequestValidationError is the validation error returned by
// ListRoomsRequest.Validate if the designated constraints aren't met.
type ListRoomsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoomsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoomsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoomsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoomsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoomsRequestValidationError) ErrorName() string { return "ListRoomsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRoomsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoomsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoomsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoomsRequestValidationError{}

// Validate checks the field values on GetRoomRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetRoomRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RoomId

	return nil
}

// GetRoomRequestValidationError is the validation error returned by
// GetRoomRequest.Validate if the designated constraints aren't met.
type GetRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomRequestValidationError) ErrorName() string { return "GetRoomRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomRequestValidationError{}

// Validate checks the field values on RoomsArray with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RoomsArray) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRooms() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoomsArrayValidationError{
					field:  fmt.Sprintf("Rooms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RoomsArrayValidationError is the validation error returned by
// RoomsArray.Validate if the designated constraints aren't met.
type RoomsArrayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomsArrayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomsArrayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomsArrayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomsArrayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomsArrayValidationError) ErrorName() string { return "RoomsArrayValidationError" }

// Error satisfies the builtin error interface
func (e RoomsArrayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomsArray.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomsArrayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomsArrayValidationError{}

// Validate checks the field values on Room with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Room) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// RoomValidationError is the validation error returned by Room.Validate if the
// designated constraints aren't met.
type RoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomValidationError) ErrorName() string { return "RoomValidationError" }

// Error satisfies the builtin error interface
func (e RoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomValidationError{}

// Validate checks the field values on LessonsArray with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LessonsArray) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLessons() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LessonsArrayValidationError{
					field:  fmt.Sprintf("Lessons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// LessonsArrayValidationError is the validation error returned by
// LessonsArray.Validate if the designated constraints aren't met.
type LessonsArrayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LessonsArrayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LessonsArrayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LessonsArrayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LessonsArrayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LessonsArrayValidationError) ErrorName() string { return "LessonsArrayValidationError" }

// Error satisfies the builtin error interface
func (e LessonsArrayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLessonsArray.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LessonsArrayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LessonsArrayValidationError{}

// Validate checks the field values on Lesson with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Lesson) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for DayOfWeek

	// no validation rules for BeginHours

	// no validation rules for BeginMinutes

	// no validation rules for EndHours

	// no validation rules for EndMinutes

	// no validation rules for Duration

	// no validation rules for NbPlace

	return nil
}

// LessonValidationError is the validation error returned by Lesson.Validate if
// the designated constraints aren't met.
type LessonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LessonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LessonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LessonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LessonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LessonValidationError) ErrorName() string { return "LessonValidationError" }

// Error satisfies the builtin error interface
func (e LessonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLesson.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LessonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LessonValidationError{}
